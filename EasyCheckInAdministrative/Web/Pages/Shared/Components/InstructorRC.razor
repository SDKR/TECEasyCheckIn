@using Microsoft.AspNetCore.Components.Web
@using System.IO
@using BlazorInputFile
@using ClosedXML.Excel
@using Core.Model
@using Web.Services
@using Web.Model.Enums
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject InstructorsService InstructorsService
@inject DepartmentsService DepartmentsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization


<section class="container">
    <div class="row my-3 px-3">
        <div class="col-2 p-0 align-self-center">
            <button class="btn btn-primary modalBtn" @onclick="() => CurrentAction = ModalActions.Insert">
                Indsæt Instruktør
            </button>
        </div>
    </div>
</section>

<section class="container">
    <div class="row">
        <table id="studentTable" class="table bg-light">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Initialer</th>
                    <th scope="col">Rolle</th>
                    <th scope="col">Slet</th>
                    <th scope="col">Rediger</th>
                </tr>
            </thead>
            <tbody>
                @if (Instructors != null)
                {
                    foreach (Instructor ins in Instructors)
                    {
                        <tr>
                            <td><p style="width:125px" @onchange="e => ins.Initials = e.Value.ToString().Trim()">@ins.Initials </p></td>
                            <td><p style="width:125px" @onchange="e => ins.Role = e.Value.ToString().Trim()">@ins.Role</p></td>
                            <td><button class="btn btn-sm btn-danger modalBtn" @onclick="() => { SelectedInstructor = ins; CurrentAction = ModalActions.Delete; }">Slet</button></td>
                            <td><button class="btn btn-sm btn-primary modalBtn" @onclick="() => { SelectedInstructor = ins; InputUpdateInitials = SelectedInstructor.Initials; SetRoleCorret(SelectedInstructor.Role) ; CurrentAction = ModalActions.Update; }">Rediger</button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</section>

<div id="modal" class="modal text-center">
    <form class="modal-content">
        <div class="container">
            @switch (CurrentAction)
            {
                case ModalActions.Delete:

                    <h1 class="text-danger">Fjern Instruktør fra system</h1>
                    <p>
                        Er du sikker på du vil fjerne Instruktøren <strong>@SelectedInstructor?.Initials</strong> fra system? <br />
                        Alle oplysninger omkring Instruktøren, vil blive fjernet <strong>HELT</strong> fra system.<br />
                        <span class="text-danger"><strong>Denne handling kan ikke fortrydes!</strong></span>
                    </p>

                    <div class="clearfix">
                        <button type="button" class="btn btn-sm btn-danger"
                                @onclick="() => DeleteInstructor(SelectedInstructor)">
                            Slet
                        </button>
                        <button type="button" class="btn btn-sm btn-secondary"
                                @onclick="HideModal">
                            Annuller
                        </button>
                    </div>
                    break;
                case ModalActions.Insert:
                    <h1>Indsæt Instruktør</h1>

                    <p>To instruktører må ikke have samme Initialer</p>

                    <div class="form-group">
                        <label for="InitialsInput">Initialer</label>
                        <input type="text" class="form-control" id="InitialsInputCreate" @bind="InstructorInitials">
                    </div>
                    <div class="form-group">
                        <label for="PasswordInput">Password</label>
                        <input type="password" class="form-control" id="PasswordInputCreate" @bind="InstructorPassword">
                    </div>

                    <div class="form-group">
                        <label for="instructorRoleInput">Instruktør</label>
                        <select id="instructorRoleInputCreate" name="Instructor" @onchange="@OnSelect">
                            @foreach (var temp in templates)
                            {
                                <option value="@temp">@temp</option>
                            }
                        </select>
                    </div>

                    <div><p>@ErrorInputMessageInsert</p></div>

                    <div class="pt-4 clearfix">
                        <button type="button" class="btn btn-sm btn-primary"
                                @onclick="() => InsertInstructor()">
                            Gem
                        </button>
                        <button type="button" class="btn btn-sm btn-secondary"
                                @onclick="HideModal">
                            Annuller
                        </button>
                    </div>
                    break;
                case ModalActions.Update:
                    <h1>Updater Instruktør</h1>

                    <p>To instruktører må ikke have samme Initialer</p>

                    <div class="form-group">
                        <label for="InitialsInputUpdate">Initialer</label>
                        <input type="text" class="form-control" name="InitialsInputUpdate" id="InitialsInputUpdate" value="@SelectedInstructor?.Initials" @onload="@(() => { InputUpdateInitials = SelectedInstructor?.Initials; })" @oninput="@((e) => { InputUpdateInitials=(string)e.Value;})">
                    </div>

                    <div class="form-group">
                        <label for="InstructorInputUpdate">Instruktør Rolle</label>
                        <select id="InstructorInputUpdate" name="Instructor" value="@SelectedInstructor?.Role" @onchange="@OnSelect">
                            @foreach (var temp in templates)
                            {
                                <option value="@temp">@temp</option>
                            }
                        </select>
                    </div>

                    <div class="pt-4 clearfix">
                        <button type="button" class="btn btn-sm btn-primary"
                                @onclick="() => UpdateInstructor(SelectedInstructor)">
                            Gem
                        </button>
                    </div>
                    <p>@ErrorInputMessagetype</p>


                    <div class="form-group">
                        <label for="PasswordInput">Nyt Password</label>
                        <input type="password" class="form-control" id="PasswordInputUpdate" @bind="InputUpdatePassword">
                    </div>

                    <div class="form-group">
                        <label for="PasswordInput">Gentag nyt Password</label>
                        <input type="password" class="form-control" id="PasswordInputConfirmeUpdate" @bind="InputUpdatePasswordConfirm">
                    </div>


                    <div class="pt-4 clearfix">
                        <button type="button" class="btn btn-sm btn-primary"
                                @onclick="() => UpdateInstructorPassword(SelectedInstructor)">
                            Gem Password
                        </button>
                        <button type="button" class="btn btn-sm btn-secondary"
                                @onclick="HideModal">
                            Annuller
                        </button>
                    </div>

                    <p>@ErrorInputMessagePassword</p>
                    break;
            }
        </div>
    </form>
</div>


@code {
    // Instructors
    public List<Instructor> Instructors { get; set; }

    public Instructor CurrentInstructor { get; set; }

    public string InstructorInitials { get; set; }
    public string InstructorPassword { get; set; }
    public Guid InstructorDepartmentId { get; set; }
    public string InstructorRole { get; set; }

    public Department CurrentDepartment { get; set; }

    // Used to decide result message
    public ResultStatus CurrentResult { get; set; }
    // Used to decide what the modal should show
    public ModalActions CurrentAction { get; set; }

    public Instructor SelectedInstructor { get; set; }

    private string InputUpdateInitials { get; set; }

    private string InputUpdatePassword { get; set; }
    private string InputUpdatePasswordConfirm { get; set; }

    private string ErrorInputMessagetype { get; set; }
    private string ErrorInputMessagePassword { get; set; }

    private string ErrorInputMessageInsert { get; set; }

    //List<string> templates = new List<string>() { "Instructor", "Administrator" };
    List<string> templates = Enum.GetValues(typeof(Core.Model.Enums.UserType)).Cast<Core.Model.Enums.UserType>().Select(v => v.ToString()).ToList();
    string selectedString = "Instructor";


    void OnSelect(ChangeEventArgs e)
    {
        selectedString = e.Value.ToString();
    }

    void SetRoleCorret(String role)
    {
        selectedString = role;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadModal");
        }
        //this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        templates.Remove("SystemAdministrator");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.Name != null)
        {
            await SetDepartment();
            await GetInstructors();
        }
    }

    private async Task SetDepartment()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userDepartmentID = authState.User.Claims.FirstOrDefault(x => x.Type == "DepartmentID").Value;

        CurrentDepartment = await DepartmentsService.GetDepartmentAsync(userDepartmentID);
    }

    private async Task GetInstructors()
    {
        Instructors = await InstructorsService.GetAllInstructorsByDepartmentAsync(CurrentDepartment.Name);
        for (int i = 0; i < Instructors.Count; i++)
        {
            if (Instructors[i].Initials == "Ingen")
            {
                Instructors.RemoveAt(i);
            }
        }
        //this.StateHasChanged();
    }


    private async void InsertInstructor()
    {
        if (InstructorInitials != "" && InstructorInitials != null && InstructorPassword != "" && InstructorPassword != null)
        {
            Instructor InstructorToAdd = new Instructor()
            {
                Initials = InstructorInitials,
                Password = InstructorPassword,
                DepartmentId = CurrentDepartment.Id,
                Role = selectedString
            };

            List<Instructor> InstructorAdd = new List<Instructor>();
            InstructorAdd.Add(InstructorToAdd);

            var result = await InstructorsService.CreateInstructor(InstructorAdd);

            if (result.Count == 0)
            {
                ErrorInputMessageInsert = "Denne bruger findes allerde";
                this.StateHasChanged();
            }
            else
            {
                await HideModal();
                await GetInstructors();
                await clearInputAndText();
                this.StateHasChanged();
            }
        }
        else
        {
            ErrorInputMessageInsert = "Initials eller Password er ikke udfyldt";
        }
    }

    private async Task DeleteInstructor(Instructor instructor)
    {
        await HideModal();
        var result = await InstructorsService.DeleteInstructor(instructor);
        if (result != null)
        {
            Instructors.Remove(instructor);
            CurrentResult = ResultStatus.Success;
        }
        else
        {
            CurrentResult = ResultStatus.Error;
        }
    }

    private async Task UpdateInstructor(Instructor instructor)
    {
        Instructor instructor1 = new Instructor();
        instructor1.Initials = instructor.Initials;


        instructor.Initials = InputUpdateInitials;
        instructor.Role = selectedString;
        var result = await InstructorsService.UpdateInstructor(instructor);
        if (result.Initials != null)
        {
            var index = Instructors.IndexOf(instructor);
            if (index != -1)
                Instructors[index] = result;
            CurrentResult = ResultStatus.Success;
            await HideModal();
        }
        else if (result.Initials == null)
        {
            ErrorInputMessagetype = "En Bruger med dette navn findes allrede";
            instructor.Initials = instructor1.Initials;
        }
        else
        {
            ErrorInputMessagetype = "Ukendt fejl";
            CurrentResult = ResultStatus.Error;
            instructor.Initials = instructor1.Initials;
        }
    }

    private async Task UpdateInstructorPassword(Instructor instructor)
    {
        if (InputUpdatePasswordConfirm == InputUpdatePassword && InputUpdatePassword != "" && InputUpdatePassword != null)
        {
            instructor.Password = InputUpdatePassword;
            var result = await InstructorsService.UpdateInstructor(instructor);
            if (result != null)
            {
                var index = Instructors.IndexOf(instructor);
                if (index != -1)
                    Instructors[index] = result;
                CurrentResult = ResultStatus.Success;
                await HideModal();
            }
            else
            {
                CurrentResult = ResultStatus.Error;
            }
        }
        else
        {
            ErrorInputMessagePassword = "Passwords var ikke ens eller ikke udfyldt";
            InputUpdatePasswordConfirm = "";
            InputUpdatePassword = "";
        }
    }

    private async Task HideModal()
    {
        await JSRuntime.InvokeVoidAsync("hideModal");
        await clearInputAndText();
        //this.StateHasChanged();
    }

    private async Task clearInputAndText()
    {
        ErrorInputMessagetype = "";
        ErrorInputMessagePassword = "";
        InputUpdatePasswordConfirm = "";
        InputUpdatePassword = "";
        ErrorInputMessageInsert = "";
        InstructorInitials = "";
        InstructorPassword = "";
    }
}
